# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g3pnl1D5zVQacae-HdaEP3vNtLSXtS5z
"""

# inspired by https://www.kaggle.com/ibtesama/getting-started-with-a-movie-recommendation-system

import pandas as pd 
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/Shared drives/movie recommendation systems

credit = pd.read_csv('tmdb_5000_credits.csv')
movie = pd.read_csv('tmdb_5000_movies.csv')
ratings = pd.read_csv('ratings_small.csv')
#links_small = pd.read_csv('links_small.csv')
#md = pd.read_csv('movies_metadata.csv')

"""# Demographic Filtering"""

merged= movie.merge(credit,on='id')
# movies which is higher than the mean can be in the chart
C= merged['vote_average'].mean()  
# movies voted have to be more than 90% percentile to enter the chart
m= merged['vote_count'].quantile(0.9)
# There are 481 movies qualified to be in the chart
q_movies = merged.copy().loc[merged['vote_count'] >= m]
q_movies.shape

def weighted_rating(x, m=m, C=C):
    v = x['vote_count']
    R = x['vote_average']
    # Calculation based on the IMDB formula
    return (v/(v+m) * R) + (m/(m+v) * C)
# Define a new feature 'score' and calculate its value with `weighted_rating()`
q_movies['score'] = q_movies.apply(weighted_rating, axis=1)

#Sort movies based on score calculated above
q_movies = q_movies.sort_values('score', ascending=False)

#Print the top 10 movies
q_movies[['title', 'vote_count', 'vote_average', 'score']].head(10)

"""# Content Based Filtering

## Movie Description
"""

df1 = credit
df2 = movie
user = ratings
user = user.rename(columns = {'movieId':'movie_id'})
user = pd.read_csv('ratings_small.csv').rename(columns = {'movieId':'movie_id'})
user_df = pd.merge(user, df1, on='movie_id', how='inner')
df1.columns = ['id','tittle','cast','crew']
df2= df2.merge(df1,on='id')

#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'
tfidf = TfidfVectorizer(lowercase = True, stop_words='english', use_idf = True)

# Define lemmatizer
lemmatizer = WordNetLemmatizer()

#Replace NaN with an empty string
df2['overview'] = df2['overview'].fillna('.')
df2['tagline'] = df2['tagline'].fillna('.')

# Comine the overview with tagline descriptive data for each movie
df2['overview_tagline'] = [df2['overview'][i].split('.')[0] +' '+df2['tagline'][i] for i in range(len(df2['overview']))]

#Construct the required TF-IDF matrix by fitting and transforming the data
# tfidf_matrix = tfidf.fit_transform(df2['overview_tagline'])

corpus = list(df2['overview_tagline'])
corpus_stemmed = []
for line in corpus:
    words = word_tokenize(line)
    doc_stemmed = ''
    for w in words:
        w_stemmed = lemmatizer.lemmatize(w)
        doc_stemmed += ' ' + w_stemmed
    corpus_stemmed.append(doc_stemmed)
    
tfidf_matrix = tfidf.fit_transform(corpus_stemmed)
 

#Output the shape of tfidf_matrix
tfidf_matrix.shape

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
cosine_sim

indices = pd.Series(df2.index, index=df2['title']).drop_duplicates()

# Function that takes in movie title as input and outputs most similar movies
def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = indices[title]

    # Get the pairwsie similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return df2['title'].iloc[movie_indices]

print(get_recommendations('The Dark Knight Rises'))
print(get_recommendations('The Avengers'))

features = ['cast', 'crew', 'keywords', 'genres']
for feature in features:
    df2[feature] = df2[feature].apply(literal_eval)

# Get the director's name from the crew feature. If director is not listed, return NaN
def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

# Returns the list top 3 elements or entire list; whichever is more.
def get_list(x):
    if isinstance(x, list):
        names = [i['name'] for i in x]
        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.
        if len(names) > 3:
            names = names[:3]
        return names

    #Return empty list in case of missing/malformed data
    return []

# Define new director, cast, genres and keywords features that are in a suitable form.
df2['director'] = df2['crew'].apply(get_director)

features = ['cast', 'keywords', 'genres']
for feature in features:
    df2[feature] = df2[feature].apply(get_list)

# Print the new features of the first 3 films
df2[['title', 'cast', 'director', 'keywords', 'genres']].head(3)

# Function to convert all strings to lower case and strip names of spaces
def clean_data(x):
    if isinstance(x, list):
        return [str.lower(i.replace(" ", "")) for i in x]
    else:
        #Check if director exists. If not, return empty string
        if isinstance(x, str):
            return str.lower(x.replace(" ", ""))
        else:
            return ''

# Apply clean_data function to your features.
features = ['cast', 'keywords', 'director', 'genres']

for feature in features:
    df2[feature] = df2[feature].apply(clean_data)

def create_soup(x):
    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])
df2['soup'] = df2.apply(create_soup, axis=1)

# Import CountVectorizer and create the count matrix

count = CountVectorizer(stop_words='english')
count_matrix = count.fit_transform(df2['soup'])
count_matrix.shape

# Compute the Cosine Similarity matrix based on the count_matrix

cosine_sim2 = cosine_similarity(count_matrix, count_matrix)

indices = pd.Series(df2.index, index=df2['title'])

get_recommendations('The Dark Knight Rises', cosine_sim2)
get_recommendations('The Godfather', cosine_sim2)

"""# Collaborative Filtering"""

user_ratings_pivot0 = ratings.pivot(index='userId', columns='movieId', values='rating')
avg_ratings = user_ratings_pivot0.mean(axis=1)
user_ratings_pivot = user_ratings_pivot0.sub(avg_ratings, axis=0)
# user_based matrix
user_ratings_pivot.fillna(0, inplace=True)
# Change from user_based to item_based matrix
movie_ratings_pivot = user_ratings_pivot.T

"""## Item Baesd"""

#Matrix of similarity between each movie
similarities = cosine_similarity(movie_ratings_pivot)
cosine_similarity_df = pd.DataFrame(similarities,
                                    columns=movie_ratings_pivot.index,
                                    index=movie_ratings_pivot.index)
cosine_similarity_df.head()

#List the top 10 movie which is most similar to movie 1
cosine_similarity_df.loc[1].sort_values(ascending=False).head(10)

"""## KNN(User Based)"""

similarities = cosine_similarity(user_ratings_pivot)
cosine_similarity_df = pd.DataFrame(similarities, 
                                    index=user_ratings_pivot.index,
                                    columns=user_ratings_pivot.index)
cosine_similarity_df.head()

#We find the 3 most similar user.
#We then find the ratings there users gave to the movie from the orginal rating dataframe and get the mean. 
#This rating represents the rating the user would likely give to movieX based on the rating users similar to them gave it.
nearest_neighbors = cosine_similarity_df[1].sort_values(ascending=False)[1:4].index
nearest_neighbors

"""## SVD"""

#pip install scikit-surprise

from surprise import Reader, Dataset, SVD
from surprise.model_selection import train_test_split
from surprise.model_selection import GridSearchCV
from surprise.model_selection import cross_validate
from surprise import accuracy
reader = Reader()

# Load data
data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)

#SVD
svd = SVD()
cross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5,n_jobs=-1,verbose=True)

#Fit the model
data=data.build_full_trainset()
svd.fit(data)

#Show ratings that user 1 has given 
ratings[ratings['userId'] == 1]

#Predict what rating will user 1 give movie 302
svd.predict(1, 302, 3,verbose=True)

"""# Hybrid"""

def convert_int(x):
    try:
        return int(x)
    except:
        return np.nan

links_small = pd.read_csv('links_small.csv')
links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')
md = pd.read_csv('movies_metadata.csv')
md = md.drop([19730, 29503, 35587])
md['id'] = md['id'].astype('int')
smd = md[md['id'].isin(links_small)]
df = smd.copy()
df.reset_index(inplace=True)
id_map = pd.read_csv('links_small.csv')[['movieId', 'tmdbId']]
id_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)
id_map.columns = ['movieId', 'id']
id_map = id_map.merge(df[['title', 'id']], on='id').set_index('title')
indices = pd.Series(df.index, index=df['title'])
indices_map = id_map.set_index('id')

def hybrid(userId, title):
    idx = indices[title]
    tmdbId = id_map.loc[title]['id']
    #print(idx)
    movie_id = id_map.loc[title]['movieId']
    
    sim_scores = list(enumerate(cosine_sim[int(idx)]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:26]
    movie_indices = [i[0] for i in sim_scores]
    
    movies = df.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'id']]
    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId']).est)
    movies = movies.sort_values('est', ascending=False)
    return movies.head(10)

hybrid(1, 'Toy Story')

hybrid(500, 'Burke & Hare')